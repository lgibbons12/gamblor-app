"""add most tables

Revision ID: a3c2e5956a12
Revises: 7f1fa72657ab
Create Date: 2025-08-26 12:35:34.057297

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
import pgvector
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a3c2e5956a12'
down_revision: Union[str, Sequence[str], None] = '7f1fa72657ab'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('games',
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('ante_dollars', sa.Integer(), nullable=False),
    sa.Column('pin', sqlmodel.sql.sqltypes.AutoString(length=6), nullable=True),
    sa.Column('mlb_game_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('adjudication_mode', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('deadline_seconds', sa.Integer(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint("adjudication_mode IN ('admin_only', 'trust_turn_holder')", name='check_adjudication_mode'),
    sa.CheckConstraint("status IN ('pending', 'active', 'final')", name='check_status'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('pin', name='uq_games_pin')
    )
    op.create_table('events',
    sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('payload', sa.JSON(), nullable=True),
    sa.Column('note', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('game_id', sa.UUID(), nullable=False),
    sa.Column('actor_user_id', sa.UUID(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['actor_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('game_players',
    sa.Column('turn_order', sa.Integer(), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('nickname', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('game_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('joined_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('last_seen_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_game_players_game_turn_order', 'game_players', ['game_id', 'turn_order'], unique=False)
    op.create_table('innings',
    sa.Column('inning_number', sa.Integer(), nullable=False),
    sa.Column('half', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('outs', sa.Integer(), nullable=False),
    sa.Column('between_ab_locked', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('game_id', sa.UUID(), nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('closed_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.CheckConstraint("half IN ('top', 'bottom')", name='check_half'),
    sa.CheckConstraint('outs >= 0 AND outs <= 3', name='check_outs'),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_innings_game_inning_half', 'innings', ['game_id', 'inning_number', 'half'], unique=False)
    op.create_table('ledger_entries',
    sa.Column('amount_dollars', sa.Integer(), nullable=False),
    sa.Column('reason', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('note', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('game_id', sa.UUID(), nullable=False),
    sa.Column('inning_id', sa.UUID(), nullable=False),
    sa.Column('player_id', sa.UUID(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint("reason IN ('ante', 'win', 'miss', 'amend_fee', 'admin_adjust', 'dp_rule')", name='check_reason'),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], ),
    sa.ForeignKeyConstraint(['inning_id'], ['innings.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['game_players.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_ledger_entries_game_inning_player', 'ledger_entries', ['game_id', 'inning_id', 'player_id'], unique=False)
    op.create_table('picks',
    sa.Column('choice_code', sqlmodel.sql.sqltypes.AutoString(length=1), nullable=False),
    sa.Column('amend_count', sa.Integer(), nullable=False),
    sa.Column('is_final', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('game_id', sa.UUID(), nullable=False),
    sa.Column('inning_id', sa.UUID(), nullable=False),
    sa.Column('player_id', sa.UUID(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint("choice_code IN ('K', 'G', 'F', 'D', 'T', 'N')", name='check_choice_code'),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], ),
    sa.ForeignKeyConstraint(['inning_id'], ['innings.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['game_players.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_picks_game_inning_player', 'picks', ['game_id', 'inning_id', 'player_id'], unique=False)
    op.create_table('turns',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('game_id', sa.UUID(), nullable=False),
    sa.Column('inning_id', sa.UUID(), nullable=False),
    sa.Column('current_player_id', sa.UUID(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['current_player_id'], ['game_players.id'], ),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], ),
    sa.ForeignKeyConstraint(['inning_id'], ['innings.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pick_amendments',
    sa.Column('old_code', sqlmodel.sql.sqltypes.AutoString(length=1), nullable=False),
    sa.Column('new_code', sqlmodel.sql.sqltypes.AutoString(length=1), nullable=False),
    sa.Column('fee_dollars', sa.Integer(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('game_id', sa.UUID(), nullable=False),
    sa.Column('inning_id', sa.UUID(), nullable=False),
    sa.Column('pick_id', sa.UUID(), nullable=False),
    sa.Column('player_id', sa.UUID(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], ),
    sa.ForeignKeyConstraint(['inning_id'], ['innings.id'], ),
    sa.ForeignKeyConstraint(['pick_id'], ['picks.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['game_players.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_table('pick_amendments')
    op.drop_table('turns')
    op.drop_index('ix_picks_game_inning_player', table_name='picks')
    op.drop_table('picks')
    op.drop_index('ix_ledger_entries_game_inning_player', table_name='ledger_entries')
    op.drop_table('ledger_entries')
    op.drop_index('ix_innings_game_inning_half', table_name='innings')
    op.drop_table('innings')
    op.drop_index('ix_game_players_game_turn_order', table_name='game_players')
    op.drop_table('game_players')
    op.drop_table('events')
    op.drop_table('games')
    # ### end Alembic commands ###